package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserData struct {
	UserID       int64  `json:"user_id"`
	GameMode     string `json:"game_mode"`
	Login        string `json:"login"`
	Password     string `json:"password"`
	TwitchNick   string `json:"twitch_nick"`
	TelegramUser string `json:"telegram_user"`
	CreatedAt    string `json:"created_at"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserState struct {
	WaitingFor   string
	TempUserData UserData
	DeleteIndex  int
}

var (
	userStates = make(map[int64]*UserState)
	adminUsers = map[int64]bool{
		295221178: true,
	}
	moscowLocation *time.Location
)

func init() {
	var err error
	moscowLocation, err = time.LoadLocation("Europe/Moscow")
	if err != nil {
		moscowLocation = time.FixedZone("MSK", 3*60*60)
		log.Printf("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –ú–æ—Å–∫–≤—ã: UTC+3")
	}
}

func getMoscowTime() string {
	now := time.Now().In(moscowLocation)
	return now.Format("02.01.2006 15:04:05 (MST)")
}

func getMoscowTimeForDisplay() string {
	now := time.Now().In(moscowLocation)
	return now.Format("02.01.2006 –≤ 15:04")
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
var gameModeKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("MOC"),
		tgbotapi.NewKeyboardButton("PF"),
		tgbotapi.NewKeyboardButton("APOC"),
	),
)

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–∞/–Ω–µ—Ç
var yesNoKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–∞"),
		tgbotapi.NewKeyboardButton("–ù–µ—Ç"),
	),
)

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
var adminKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", "delete_all"),
		tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫", "list_orders"),
	),
)

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
func getConfirmationKeyboard(action string, index int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", fmt.Sprintf("confirm_%s_%d", action, index)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", "cancel_delete"),
		),
	)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ username
func isValidTelegramUsername(username string) bool {
	if username == "" {
		return false
	}
	if !strings.HasPrefix(username, "@") {
		return false
	}

	cleanUsername := username[1:]
	if len(cleanUsername) < 5 || len(cleanUsername) > 32 {
		return false
	}

	for _, char := range cleanUsername {
		if !((char >= 'a' && char <= 'z') ||
			(char >= 'A' && char <= 'Z') ||
			(char >= '0' && char <= '9') ||
			char == '_') {
			return false
		}
	}

	return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON - –ò–°–ü–†–ê–í–õ–ï–ù–ê
func saveUserData(userData UserData) error {
	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
	userData.CreatedAt = getMoscowTime()

	file, err := os.OpenFile("users.json", os.O_RDWR|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	var users []UserData
	decoder := json.NewDecoder(file)
	if err := decoder.Decode(&users); err != nil && err.Error() != "EOF" {
		users = []UserData{}
	}

	// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	found := false
	for i, user := range users {
		if user.UserID == userData.UserID {
			users[i] = userData // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
			found = true
			break
		}
	}

	// –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π (–∞ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ)
	if !found {
		users = append(users, userData)
	}

	file.Seek(0, 0)
	file.Truncate(0)
	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	return encoder.Encode(users)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
func getAllOrders() ([]UserData, error) {
	file, err := os.Open("users.json")
	if err != nil {
		if os.IsNotExist(err) {
			return []UserData{}, nil
		}
		return nil, err
	}
	defer file.Close()

	var users []UserData
	decoder := json.NewDecoder(file)
	if err := decoder.Decode(&users); err != nil && err.Error() != "EOF" {
		return nil, err
	}

	return users, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
func deleteAllOrders() error {
	file, err := os.OpenFile("users.json", os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	return encoder.Encode([]UserData{})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
func deleteOrder(index int) error {
	orders, err := getAllOrders()
	if err != nil {
		return err
	}

	if index < 0 || index >= len(orders) {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–∫–∞–∑–∞")
	}

	orders = append(orders[:index], orders[index+1:]...)

	file, err := os.OpenFile("users.json", os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	return encoder.Encode(orders)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
func isAdmin(userID int64) bool {
	return adminUsers[userID]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
func formatOrders(orders []UserData, withIndex bool) string {
	if len(orders) == 0 {
		return "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
	}

	response := fmt.Sprintf("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã (%d):\n\n", len(orders))
	for i, order := range orders {
		if withIndex {
			response += fmt.Sprintf("üî¢ #%d\n", i+1)
		}
		response += fmt.Sprintf("üë§ User ID: %d\n", order.UserID)
		response += fmt.Sprintf("üì± Telegram: %s\n", order.TelegramUser)
		response += fmt.Sprintf("üéÆ –†–µ–∂–∏–º: %s\n", order.GameMode)
		response += fmt.Sprintf("üîë –õ–æ–≥–∏–Ω: %s\n", order.Login)
		response += fmt.Sprintf("üîí –ü–∞—Ä–æ–ª—å: %s\n", order.Password)
		response += fmt.Sprintf("üì∫ Twitch: %s\n", order.TwitchNick)
		response += fmt.Sprintf("üïê –°–æ–∑–¥–∞–Ω: %s\n", order.CreatedAt)
		response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
	}
	return response
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
func getOrdersStats() string {
	orders, err := getAllOrders()
	if err != nil {
		return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + err.Error()
	}

	if len(orders) == 0 {
		return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\nüì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: 0"
	}

	stats := make(map[string]int)
	var latestOrder time.Time

	for _, order := range orders {
		stats[order.GameMode]++

		if orderTime, err := time.Parse("02.01.2006 15:04:05 (MST)", order.CreatedAt); err == nil {
			if orderTime.After(latestOrder) {
				latestOrder = orderTime
			}
		}
	}

	response := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n"
	response += fmt.Sprintf("üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: %d\n", len(orders))
	for mode, count := range stats {
		response += fmt.Sprintf("üéÆ %s: %d\n", mode, count)
	}

	if !latestOrder.IsZero() {
		response += fmt.Sprintf("‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: %s\n", latestOrder.Format("02.01.2006 –≤ 15:04"))
	}

	return response
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_APITOKEN"))
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			userID := update.CallbackQuery.From.ID
			if isAdmin(userID) {
				data := update.CallbackQuery.Data
				chatID := update.CallbackQuery.Message.Chat.ID

				var responseText string

				switch {
				case data == "delete_all":
					responseText = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–∫–∞–∑—ã?\n\n–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!"
					msg := tgbotapi.NewMessage(chatID, responseText)
					msg.ReplyMarkup = getConfirmationKeyboard("all", -1)
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}

				case data == "list_orders":
					// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
					orders, err := getAllOrders()
					if err != nil {
						responseText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: " + err.Error()
					} else {
						responseText = formatOrders(orders, true)
					}

					// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
					editMsg := tgbotapi.NewEditMessageText(chatID, update.CallbackQuery.Message.MessageID, responseText)
					if _, err := bot.Send(editMsg); err != nil {
						log.Panic(err)
					}

				case strings.HasPrefix(data, "confirm_"):
					parts := strings.Split(data, "_")
					if len(parts) >= 3 {
						action := parts[1]
						index, _ := strconv.Atoi(parts[2])

						switch action {
						case "all":
							if err := deleteAllOrders(); err != nil {
								responseText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: " + err.Error()
							} else {
								responseText = "‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"
							}
						case "order":
							if err := deleteOrder(index); err != nil {
								responseText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: " + err.Error()
							} else {
								responseText = fmt.Sprintf("‚úÖ –ó–∞–∫–∞–∑ #%d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", index+1)
							}
						}
					}

				case data == "cancel_delete":
					responseText = "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"

				default:
					responseText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã (–Ω–µ –¥–ª—è list_orders)
				if responseText != "" && data != "list_orders" {
					msg := tgbotapi.NewMessage(chatID, responseText)
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
				}

				// –û—Ç–≤–µ—Ç –Ω–∞ callback (—É–±–∏—Ä–∞–µ—Ç —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏)
				callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
				if _, err := bot.Request(callback); err != nil {
					log.Panic(err)
				}
			}
			continue
		}

		if update.Message == nil {
			continue
		}

		userID := update.Message.Chat.ID
		var msg tgbotapi.MessageConfig

		state, exists := userStates[userID]

		if update.Message.Text == "MOC" || update.Message.Text == "PF" || update.Message.Text == "APOC" {
			if state, exists := userStates[userID]; exists && state.WaitingFor == "game_mode" {
				state.TempUserData.GameMode = update.Message.Text
				state.WaitingFor = "artifact_change"
				msg = tgbotapi.NewMessage(userID, "–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö?")
				msg.ReplyMarkup = yesNoKeyboard
			} else {
				msg = tgbotapi.NewMessage(userID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–æ–º–æ—â—å—é /neworder")
			}

			if _, err := bot.Send(msg); err != nil {
				log.Panic(err)
			}
			continue
		}

		if isAdmin(userID) {
			switch update.Message.Command() {
			case "orders":
				orders, err := getAllOrders()
				if err != nil {
					msg = tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: "+err.Error())
				} else {
					msg = tgbotapi.NewMessage(userID, formatOrders(orders, true))
					msg.ReplyMarkup = adminKeyboard
				}

			case "stats":
				msg = tgbotapi.NewMessage(userID, getOrdersStats())

			case "delete":
				msg = tgbotapi.NewMessage(userID, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–∫–∞–∑—ã?\n\n–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!")
				msg.ReplyMarkup = getConfirmationKeyboard("all", -1)

			case "deleteorder":
				args := strings.Fields(update.Message.Text)
				if len(args) < 2 {
					msg = tgbotapi.NewMessage(userID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deleteorder <–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞>")
				} else {
					index, err := strconv.Atoi(args[1])
					if err != nil || index < 1 {
						msg = tgbotapi.NewMessage(userID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
					} else {
						orders, err := getAllOrders()
						if err != nil {
							msg = tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞: "+err.Error())
						} else if index > len(orders) {
							msg = tgbotapi.NewMessage(userID, fmt.Sprintf("–ó–∞–∫–∞–∑–∞ #%d –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", index))
						} else {
							if userStates[userID] == nil {
								userStates[userID] = &UserState{}
							}
							userStates[userID].DeleteIndex = index - 1

							order := orders[index-1]
							msg = tgbotapi.NewMessage(userID,
								fmt.Sprintf("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #%d?\n\n"+
									"üë§ User ID: %d\n"+
									"üì± Telegram: %s\n"+
									"üéÆ –†–µ–∂–∏–º: %s\n"+
									"üîë –õ–æ–≥–∏–Ω: %s\n"+
									"üì∫ Twitch: %s\n"+
									"üïê –°–æ–∑–¥–∞–Ω: %s\n\n"+
									"–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!",
									index, order.UserID, order.TelegramUser, order.GameMode, order.Login, order.TwitchNick, order.CreatedAt))
							msg.ReplyMarkup = getConfirmationKeyboard("order", index-1)
						}
					}
				}

			case "adminhelp":
				helpText := `üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:

/orders - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ 
/delete - –£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–∫–∞–∑—ã 
/deleteorder <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑
/adminhelp - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∞`
				msg = tgbotapi.NewMessage(userID, helpText)
			}

			if msg.Text != "" {
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
				continue
			}
		}

		if exists && state.WaitingFor != "" {
			switch state.WaitingFor {
			case "artifact_change":
				if update.Message.Text == "–î–∞" || update.Message.Text == "–ù–µ—Ç" {
					msg = tgbotapi.NewMessage(userID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
					state.WaitingFor = "login"
					msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
				} else {
					msg = tgbotapi.NewMessage(userID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç' –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:")
					msg.ReplyMarkup = yesNoKeyboard
				}

			case "login":
				state.TempUserData.Login = update.Message.Text
				msg = tgbotapi.NewMessage(userID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
				state.WaitingFor = "password"

			case "password":
				state.TempUserData.Password = update.Message.Text
				msg = tgbotapi.NewMessage(userID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –Ω–∞ Twitch:")
				state.WaitingFor = "twitch_nick"

			case "twitch_nick":
				state.TempUserData.TwitchNick = update.Message.Text
				msg = tgbotapi.NewMessage(userID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ Telegram (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @example):")
				state.WaitingFor = "telegram_user"

			case "telegram_user":
				if isValidTelegramUsername(update.Message.Text) {
					state.TempUserData.TelegramUser = update.Message.Text
					state.TempUserData.UserID = userID

					if err := saveUserData(state.TempUserData); err != nil {
						msg = tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: "+err.Error())
					} else {
						creationTime := getMoscowTimeForDisplay()
						msg = tgbotapi.NewMessage(userID, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"+
							"–†–µ–∂–∏–º –∏–≥—Ä—ã: "+state.TempUserData.GameMode+"\n"+
							"–õ–æ–≥–∏–Ω: "+state.TempUserData.Login+"\n"+
							"–ü–∞—Ä–æ–ª—å: ********\n"+
							"Twitch –Ω–∏–∫: "+state.TempUserData.TwitchNick+"\n"+
							"Telegram: "+state.TempUserData.TelegramUser+"\n"+
							"üïê –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: "+creationTime)
					}

					delete(userStates, userID)
					msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
				} else {
					msg = tgbotapi.NewMessage(userID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username!\n\n"+
						"Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ underscore.\n"+
						"–ü—Ä–∏–º–µ—Ä: @example_user\n\n"+
						"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username –µ—â–µ —Ä–∞–∑:")
					state.WaitingFor = "telegram_user"
				}

			default:
				msg = tgbotapi.NewMessage(userID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /neworder")
				delete(userStates, userID)
			}

		} else {
			switch update.Message.Command() {
			case "start":
				msg = tgbotapi.NewMessage(userID, "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
				msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)

			case "help":
				helpText := `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
/neworder - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å`

				if isAdmin(userID) {
					helpText += "\n\nüõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ /adminhelp"
				}

				msg = tgbotapi.NewMessage(userID, helpText)

			case "neworder":
				userStates[userID] = &UserState{
					WaitingFor:   "game_mode",
					TempUserData: UserData{},
				}
				msg = tgbotapi.NewMessage(userID, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:")
				msg.ReplyMarkup = gameModeKeyboard

			default:
				msg = tgbotapi.NewMessage(userID, "ü§ñ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \""+update.Message.Text+"\"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.")
			}
		}

		if _, err := bot.Send(msg); err != nil {
			log.Panic(err)
		}
	}
}
